#!/usr/bin/env python3
"""
🧪 Generate Sample Polycyclic Architecture Molecules
Creates a variety of sophisticated molecular structures for different architectural patterns.
"""

import sys
from pathlib import Path

# Add genesis-engine to path
sys.path.insert(0, str(Path(__file__).parent / "genesis-engine"))

from transformations.polycyclic_generator import PolycyclicMoleculeGenerator
from aggregates.chemical_blueprints import ChemicalBlueprintLibrary


def generate_sample_molecules():
    """Generate sample molecules from polycyclic blueprints"""
    
    print("🧬 Genesis Engine - Polycyclic Molecule Generation")
    print("=" * 60)
    
    library = ChemicalBlueprintLibrary()
    generator = PolycyclicMoleculeGenerator()
    
    # Generate molecules for each blueprint
    sample_molecules = {}
    
    # 1. A2C10 Identity+Access (Naphthalene)
    print("\n🔬 Generating A2C10 Identity+Access (Naphthalene-like)...")
    blueprint = library.get_blueprint("fused_identity_access")
    adapters = blueprint.get_adapter_configs()
    
    molecule = generator.create_fused_dual_core(
        "Identity", "Access", adapters[:9]  # Take first 9 adapters to match A2C10
    )
    svg_content = generator.generate_advanced_svg(molecule)
    
    sample_molecules["A2C10_Identity_Access"] = svg_content
    print(f"   ✅ Generated {len(svg_content)} character SVG")
    
    # 2. A2C12 Payment+Billing (Naphthalene)  
    print("\n💰 Generating A2C12 Payment+Billing (Naphthalene-like)...")
    blueprint = library.get_blueprint("payment_billing")
    adapters = blueprint.get_adapter_configs()
    
    molecule = generator.create_fused_dual_core(
        "Payment", "Billing", adapters
    )
    svg_content = generator.generate_advanced_svg(molecule)
    
    sample_molecules["A2C12_Payment_Billing"] = svg_content
    print(f"   ✅ Generated {len(svg_content)} character SVG")
    
    # 3. A3C15 Order+Fulfillment+Shipping (Anthracene)
    print("\n📦 Generating A3C15 Order→Fulfillment→Shipping (Anthracene-like)...")
    blueprint = library.get_blueprint("order_fulfillment_shipping")
    adapters = blueprint.get_adapter_configs()
    
    molecule = generator.create_triple_core_linear(
        ["Order", "Fulfillment", "Shipping"], adapters
    )
    svg_content = generator.generate_advanced_svg(molecule)
    
    sample_molecules["A3C15_Order_Fulfillment_Shipping"] = svg_content
    print(f"   ✅ Generated {len(svg_content)} character SVG")
    
    # 4. A3C14 User+Content+Social (Phenanthrene-like)
    print("\n👥 Generating A3C14 User⟨Content⟩Social (Phenanthrene-like)...")
    blueprint = library.get_blueprint("user_content_social")  
    adapters = blueprint.get_adapter_configs()
    
    # For now, use fused dual core as we haven't implemented angular yet
    molecule = generator.create_fused_dual_core(
        "User+Content", "Social", adapters
    )
    svg_content = generator.generate_advanced_svg(molecule)
    
    sample_molecules["A3C14_User_Content_Social"] = svg_content
    print(f"   ✅ Generated {len(svg_content)} character SVG")
    
    # Save all molecules
    print("\n💾 Saving molecular structures...")
    for name, content in sample_molecules.items():
        filename = f"{name}.svg"
        with open(filename, "w") as f:
            f.write(content)
        print(f"   📁 {filename}")
    
    # Generate summary markdown
    print("\n📝 Generating molecular catalog...")
    catalog_content = generate_molecule_catalog(sample_molecules, library)
    
    with open("Polycyclic_Molecule_Catalog.md", "w") as f:
        f.write(catalog_content)
    print("   📁 Polycyclic_Molecule_Catalog.md")
    
    print("\n✨ Sample molecule generation complete!")
    print(f"   Generated {len(sample_molecules)} polycyclic architecture molecules")
    print("   🌐 Open the SVG files in a browser to see the beautiful structures!")


def generate_molecule_catalog(molecules: dict, library: ChemicalBlueprintLibrary) -> str:
    """Generate a markdown catalog of all molecules"""
    
    catalog = library.get_blueprint_catalog()
    
    content = f"""# 🧬 Polycyclic Architecture Molecule Catalog

Generated by Genesis Engine Molecular Architecture System

## 🧪 Overview

This catalog contains sophisticated polycyclic molecular representations of software architectures, inspired by real aromatic hydrocarbon chemistry. Each molecule represents a complex bounded context or distributed system architecture.

## 📊 Molecular Statistics

| Molecule | Formula | Structure | Cores | Adapters | Complexity |
|----------|---------|-----------|-------|----------|------------|
"""
    
    # Add table rows for each molecule
    for mol_name in molecules.keys():
        blueprint_key = mol_name.split("_", 1)[1].lower().replace("_", "_")
        if blueprint_key == "identity_access":
            blueprint_key = "fused_identity_access"
        elif blueprint_key == "order_fulfillment_shipping":
            blueprint_key = "order_fulfillment_shipping"  
        elif blueprint_key == "user_content_social":
            blueprint_key = "user_content_social"
        elif blueprint_key == "payment_billing":
            blueprint_key = "payment_billing"
            
        if blueprint_key in catalog:
            info = catalog[blueprint_key]
            content += f"| {mol_name} | {mol_name.split('_')[0]} | {info['structure']} | {info['core_count']} | {info['adapter_count']} | {info['complexity']} |\n"
    
    content += f"""

## 🔬 Molecular Structures

### A2C10 Identity+Access (Naphthalene-like)
![A2C10 Identity+Access](A2C10_Identity_Access.svg)

**Chemical Pattern**: Fused dual hexagonal cores with aromatic stability
**Architecture**: Identity and Access management as shared bounded contexts
**Key Features**: 
- Toxic REST adapter requiring remediation
- AuthZ in quantum superposition state
- Shared audit trail with resonance bonding

### A2C12 Payment+Billing (Naphthalene-like)  
![A2C12 Payment+Billing](A2C12_Payment_Billing.svg)

**Chemical Pattern**: Fused financial processing cores
**Architecture**: Payment processing with integrated billing domain
**Key Features**:
- High-strength bonds to Stripe and Ledger systems
- Fraud detection with compliance resonance
- Webhook adapter marked as toxic

### A3C15 Order→Fulfillment→Shipping (Anthracene-like)
![A3C15 Order Fulfillment Shipping](A3C15_Order_Fulfillment_Shipping.svg)

**Chemical Pattern**: Linear triple-core processing chain
**Architecture**: E-commerce order lifecycle pipeline
**Key Features**:
- Sequential processing through three domains
- Carrier service resonance group (UPS, FedEx, USPS)
- ERP system with high toxicity requiring isolation

### A3C14 User⟨Content⟩Social (Phenanthrene-like)
![A3C14 User Content Social](A3C14_User_Content_Social.svg)

**Chemical Pattern**: Angular triple-core with shared content processing
**Architecture**: Social platform with content at the center
**Key Features**:
- ML-powered recommendation evolution pathway
- Content moderation with toxicity monitoring  
- Feed/Follow resonance for social graph stability

## 🧪 Chemical Properties

### Stability Analysis
- **Aromatic Cores**: Provide architectural stability through delocalized electron bonding
- **Fusion Bonds**: Shared domain boundaries with strong coupling
- **Resonance Groups**: Services that stabilize each other through interaction
- **Toxic Adapters**: Components requiring attention or refactoring

### Bond Types
- **Aromatic Bonds**: Stable architectural patterns (hexagonal core structures)
- **Strong Bonds**: High-traffic, critical connections (>1.5 strength)
- **Weak Bonds**: Low-traffic, optional connections (<1.0 strength)
- **Evolution Bonds**: Components undergoing planned migration

## 🚀 Usage

These molecular architectures can be:
1. **Analyzed** for stability and complexity metrics
2. **Evolved** through controlled chemical reactions  
3. **Refactored** by bond strengthening/weakening
4. **Monitored** for toxic adapter buildup
5. **Scaled** through polycyclic fusion patterns

## 🔬 Generated Details

- **System**: Genesis Engine v1.0
- **Generator**: PolycyclicMoleculeGenerator
- **Chemical Authenticity**: Based on real aromatic hydrocarbon patterns
- **SVG Features**: Gradients, filters, animations, chemical styling
- **Molecular Formulas**: ATCG notation (Aggregate, Transformation, Connector, Genesis Event)

---
*The future of software architecture is molecular!* 🧬✨
"""
    
    return content


if __name__ == "__main__":
    generate_sample_molecules()