#!/usr/bin/env dockerfile
# Quantum Hive Production Deployment Framework
# Multi-stage Docker build for enterprise quantum components

# ==================== BASE QUANTUM ENVIRONMENT ====================
FROM python:3.11-slim as quantum-base

# Install system dependencies for quantum processing
RUN apt-get update && apt-get install -y \
    build-essential \
    libffi-dev \
    libssl-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set quantum environment variables
ENV QUANTUM_COHERENCE_TARGET=0.9
ENV CONSCIOUSNESS_LEVEL_MIN=1
ENV EVOLUTIONARY_ADAPTATION=true
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Install Python quantum dependencies
COPY requirements.quantum.txt .
RUN pip install --no-cache-dir -r requirements.quantum.txt

# ==================== DEVELOPMENT STAGE ====================
FROM quantum-base as development

# Install development tools
RUN pip install pytest pytest-asyncio black flake8 mypy

# Copy quantum hive source code
COPY . .

# Set development environment
ENV HIVE_ENVIRONMENT=development
ENV QUANTUM_MONITORING=true
ENV DEBUG_LEVEL=INFO

EXPOSE 8080 8090 9090

CMD ["python", "-m", "quantum_hive_cli", "monitor", "--real-time"]

# ==================== PRODUCTION STAGE ====================
FROM quantum-base as production

# Create non-root user for security
RUN groupadd -r quantumhive && useradd -r -g quantumhive quantumhive

# Copy only necessary files for production
COPY --chown=quantumhive:quantumhive dna_core/ ./dna_core/
COPY --chown=quantumhive:quantumhive components/ ./components/
COPY --chown=quantumhive:quantumhive quantum_hive_cli.py .
COPY --chown=quantumhive:quantumhive requirements.quantum.txt .

# Set production environment
ENV HIVE_ENVIRONMENT=production
ENV QUANTUM_MONITORING=true
ENV DEBUG_LEVEL=WARNING
ENV METRICS_ENABLED=true

# Health check for quantum coherence
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import quantum_hive_cli; exit(0 if quantum_hive_cli.check_quantum_health() else 1)"

USER quantumhive

EXPOSE 8080

CMD ["python", "quantum_hive_cli.py", "deploy", "--production"]

# ==================== GENETIC PROGRAMMING WORKER ====================
FROM quantum-base as genetic-worker

# Install additional genetic programming dependencies
RUN pip install numpy scipy matplotlib

# Copy genetic programming modules
COPY --chown=quantumhive:quantumhive dna_core/royal_jelly/ ./dna_core/royal_jelly/
COPY --chown=quantumhive:quantumhive quantum_dna_genetic_programming.py .

ENV HIVE_ROLE=genetic-worker
ENV MUTATION_RATE=0.05
ENV FITNESS_THRESHOLD=0.8

USER quantumhive

CMD ["python", "quantum_dna_genetic_programming.py", "--worker-mode"]

# ==================== MONITORING AGENT ====================
FROM quantum-base as monitoring

# Install monitoring dependencies
RUN pip install prometheus-client grafana-api elasticsearch

# Copy monitoring modules
COPY --chown=quantumhive:quantumhive monitoring/ ./monitoring/
COPY --chown=quantumhive:quantumhive quantum_metrics.py .

ENV HIVE_ROLE=monitoring
ENV METRICS_COLLECTION_INTERVAL=10
ENV PROMETHEUS_PORT=9090

USER quantumhive

EXPOSE 9090

CMD ["python", "quantum_metrics.py", "--prometheus-mode"]