version: '3.8'

# Quantum Hive Production Deployment
# Complete production stack with monitoring, security, and scaling

services:
  # ============ QUANTUM HIVE CORE SERVICES ============
  
  quantum-hive-core:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.quantum-hive
      target: production
    image: quantum-hive:latest
    container_name: quantum-hive-core
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - HIVE_ENVIRONMENT=production
      - QUANTUM_COHERENCE_TARGET=0.9
      - CONSCIOUSNESS_LEVEL_TARGET=3
      - EVOLUTIONARY_ADAPTATION=true
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9090
    volumes:
      - quantum-data:/app/data
      - quantum-logs:/app/logs
      - quantum-config:/app/config:ro
    networks:
      - quantum-hive
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
  
  quantum-genetic-workers:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.quantum-hive
      target: genetic-worker
    image: quantum-hive:genetic-worker
    deploy:
      replicas: 2
    environment:
      - HIVE_ROLE=genetic-worker
      - MUTATION_RATE=0.05
      - FITNESS_THRESHOLD=0.8
      - QUANTUM_COHERENCE_TARGET=0.9
    volumes:
      - genetic-workspace:/app/workspace
    networks:
      - quantum-hive
    depends_on:
      - quantum-hive-core
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
  
  quantum-monitoring:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.quantum-hive
      target: monitoring
    image: quantum-hive:monitoring
    container_name: quantum-monitoring
    restart: unless-stopped
    ports:
      - "9091:9090"
    environment:
      - HIVE_ROLE=monitoring
      - METRICS_COLLECTION_INTERVAL=10
      - PROMETHEUS_PORT=9090
    networks:
      - quantum-hive
    depends_on:
      - quantum-hive-core

  # ============ DATA LAYER ============
  
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=quantum_hive
      - POSTGRES_USER=quantum_admin
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - quantum-hive
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum_admin -d quantum_hive"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
  
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --requirepass $(cat /run/secrets/redis_password)
    volumes:
      - redis-data:/data
    networks:
      - quantum-hive
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # ============ MONITORING STACK ============
  
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    ports:
      - "9092:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus-rules.yaml:/etc/prometheus/rules.yml:ro
      - prometheus-data:/prometheus
    networks:
      - quantum-hive
    depends_on:
      - quantum-hive-core
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
  
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboard-quantum-hive.json:/var/lib/grafana/dashboards/quantum-hive.json:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - quantum-hive
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
  
  alertmanager:
    image: prom/alertmanager:latest
    container_name: quantum-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    networks:
      - quantum-hive
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  # ============ SECURITY & PROXY ============
  
  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - quantum-hive
    depends_on:
      - quantum-hive-core
      - grafana
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
  
  # ============ LOG AGGREGATION ============
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: quantum-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - quantum-hive
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: quantum-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - quantum-hive
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: quantum-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - quantum-hive
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # ============ MESSAGE QUEUE ============
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: quantum-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=quantum_admin
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/rabbitmq_password
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - quantum-hive
    secrets:
      - rabbitmq_password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

# ============ NETWORKS ============
networks:
  quantum-hive:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ============ VOLUMES ============
volumes:
  quantum-data:
    driver: local
  quantum-logs:
    driver: local
  quantum-config:
    driver: local
  genetic-workspace:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  elasticsearch-data:
    driver: local
  rabbitmq-data:
    driver: local
  nginx-logs:
    driver: local

# ============ SECRETS ============
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  rabbitmq_password:
    file: ./secrets/rabbitmq_password.txt