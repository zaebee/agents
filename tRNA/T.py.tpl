# Generated by The Genesis Engine: T.py.tpl
from dataclasses import dataclass

@dataclass
class {class_name}Input:
    """A data class defining the input for our transformation."""
    # ... fields for the input data
    value_a: int
    value_b: int

@dataclass
class {class_name}Output:
    """A data class defining the output of our transformation."""
    # ... fields for the output data
    result: int

class {class_name}Transformation:
    """
    A stateless Transformation that performs a specific calculation or data mapping.
    It takes a defined input and returns a defined output without side effects.
    """
    def process(self, input_data: {class_name}Input) -> {class_name}Output:
        """
        Executes the pure transformation logic.
        """
        print(f"  - Executing {self.__class__.__name__}...")
        # Example pure logic:
        result = input_data.value_a + input_data.value_b

        output = {class_name}Output(result=result)
        print(f"  - Transformation complete. Result: {output.result}")
        return output
