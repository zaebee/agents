# Generated by The Genesis Engine: C.py.tpl
from dataclasses import dataclass

@dataclass
class {class_name}Command:
    """Data Transfer Object for the {class_name} command."""
    # This would be populated with fields relevant to the command
    component_id: str
    some_value: str

class {class_name}Connector:
    """
    A driving connector that handles the {class_name} command.
    It translates an external request (e.g., from a web server or message bus)
    into a domain command object.
    """
    def __init__(self, command_handler):
        # In a real app, this would be a bus or a service that dispatches commands
        self._command_handler = command_handler

    def handle_external_request(self, request_data: dict):
        """
        Receives raw data from the outside world and begins the process.
        """
        print(f"Request for '{self.__class__.__name__}' received!")
        try:
            # 1. Translate raw data into a typed command object
            command = {class_name}Command(**request_data)
            print(f"  - Translated to domain command: {command}")

            # 2. Pass the command to the application's command handler
            # In a real app, this would likely be an asynchronous call
            self._command_handler.handle(command)

        except TypeError as e:
            # Handle cases where the request_data doesn't match the command's fields
            print(f"Error: Invalid request data. {e}")
            # In a real app, this would return a proper error response

        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            # Handle other potential errors
