import pytest
from hive.components.{{ genome.name | snake_case }}.organism import {{ genome.name | pascal_case }}
from hive.components.{{ genome.name | snake_case }}.contracts import (
    {% for item in genome.bonds.consumes %}{{ item.command | pascal_case }}Command,{% endfor %}
    {% for item in genome.bonds.produces %}{{ item.event | pascal_case }}Event,{% endfor %}
)

# This file is auto-generated by the Genesis Engine.
# Please fill in the tests to ensure the organism behaves as expected.

@pytest.fixture
def organism() -> {{ genome.name | pascal_case }}:
    """Provides a fresh instance of the organism for each test."""
    return {{ genome.name | pascal_case }}()

def test_organism_creation(organism: {{ genome.name | pascal_case }}):
    """Tests that the organism can be created successfully."""
    assert organism is not None
    assert organism.genome.purpose == "{{ genome.purpose }}"

{% for item in genome.bonds.consumes %}
@pytest.mark.skip(reason="Test not implemented by developer yet.")
def test_{{ item.handler }}_handler(organism: {{ genome.name | pascal_case }}):
    """
    Tests the {{ item.handler }} command handler.

    1. Create a command.
    2. Call the handler.
    3. Assert that the correct event is returned and the organism's state has changed.
    """
    # Arrange
    command = {{ item.command | pascal_case }}Command(
        # TODO: Fill in command parameters
    )

    # Act
    # result_event = organism.{{ item.handler }}(command)

    # Assert
    # assert isinstance(result_event, {{ genome.bonds.produces[0].event | pascal_case }}Event)
    # TODO: Add more assertions about the state of the organism or the event payload.
    pytest.fail("Test not implemented.")
{% endfor %}

# TODO: Add more tests for edge cases, error handling, and other behaviors.
