#!/bin/bash

# The Genesis Engine: a CLI for managing the Hive codebase.
# This tool acts as the "Connector" (C) between the developer and the codebase.

# --- Configuration ---
HIVE_ROOT="hive/components"

# --- Helper Functions ---
function show_usage() {
    echo "The Genesis Engine - The 'Connector' to the Hive."
    echo "Usage: $0 hatch <codon_type> <component_name>"
    echo ""
    echo "Codon Types:"
    echo "  command   - Scaffolds a 'Handle Command' pattern (C -> A -> G)."
    echo "  query     - Scaffolds a 'Query Data' pattern (C -> T -> C)."
    echo "  event     - Scaffolds a 'React to Event' pattern (G -> C -> A -> G)."
}

# --- Command Parsing ---
COMMAND=$1
CODON_TYPE=$2
COMPONENT_NAME=$3

if [ "$COMMAND" != "hatch" ] || [ -z "$CODON_TYPE" ] || [ -z "$COMPONENT_NAME" ]; then
    show_usage
    exit 1
fi

COMPONENT_PATH="$HIVE_ROOT/$COMPONENT_NAME"
echo "Hatching new '$CODON_TYPE' codon named '$COMPONENT_NAME'..."

if [ -d "$COMPONENT_PATH" ]; then
    echo "Error: Component '$COMPONENT_NAME' already exists at $COMPONENT_PATH."
    exit 1
fi

# --- Scaffolding Logic ---
mkdir -p "$COMPONENT_PATH"
echo "Created directory: $COMPONENT_PATH"

case $CODON_TYPE in
    command)
        echo "Scaffolding 'Handle Command' pattern (C -> A -> G)..."
        touch "$COMPONENT_PATH/connector.py"
        touch "$COMPONENT_PATH/command.py"
        touch "$COMPONENT_PATH/aggregate.py"
        touch "$COMPONENT_PATH/event.py"
        ;;
    query)
        echo "Scaffolding 'Query Data' pattern (C -> T -> C)..."
        touch "$COMPONENT_PATH/connector.py"
        touch "$COMPONENT_PATH/query.py"
        touch "$COMPONENT_PATH/transformer.py"
        touch "$COMPONENT_PATH/dto.py"
        ;;
    event)
        echo "Scaffolding 'React to Event' pattern (G -> C -> A -> G)..."
        touch "$COMPONENT_PATH/listening_connector.py"
        touch "$COMPONENT_PATH/command.py"
        touch "$COMPONENT_PATH/aggregate.py"
        touch "$COMPONENT_PATH/new_event.py"
        ;;
    *)
        echo "Error: Unknown codon type '$CODON_TYPE'."
        rm -rf "$COMPONENT_PATH" # Clean up created directory
        show_usage
        exit 1
        ;;
esac

echo "Success! New '$CODON_TYPE' codon hatched at: $COMPONENT_PATH"
echo "Next steps: 'spin cocoon' to add tests."
