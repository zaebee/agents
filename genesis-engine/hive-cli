#!/bin/bash

# The Genesis Engine: a CLI for managing the Hive codebase.
# This tool acts as the "Connector" (C) between the developer and the codebase.

# --- Configuration ---
HIVE_ROOT="hive/components"

# --- Helper Functions ---
function show_usage() {
    echo "The Genesis Engine - The 'Connector' to the Hive."
    echo "Usage: $0 <command> [subcommand] [options]"
    echo ""
    echo "Commands:"
    echo "  hatch larva <component_name>  - Creates the initial file (larva) for a new component."
    echo "  ... (spin, emerge coming soon)"
}

# --- Command Parsing (ATCG Mapping) ---
COMMAND=$1          # A = Aggregate Action (e.g., hatch)
SUBCOMMAND=$2       # T = Transformation (e.g., larva)
COMPONENT_NAME=$3   # G = Genesis Target (the name of the new component)

if [ -z "$COMMAND" ]; then
    show_usage
    exit 1
fi

# --- Command Logic ---
if [ "$COMMAND" == "hatch" ] && [ "$SUBCOMMAND" == "larva" ]; then
    if [ -z "$COMPONENT_NAME" ]; then
        echo "Error: <component_name> is required for hatch larva."
        show_usage
        exit 1
    fi

    COMPONENT_PATH="$HIVE_ROOT/$COMPONENT_NAME"

    echo "Hatching larva for component '$COMPONENT_NAME'..."

    if [ -d "$COMPONENT_PATH" ]; then
        echo "Error: Component '$COMPONENT_NAME' already exists at $COMPONENT_PATH."
        exit 1
    fi

    # Create the component directory and a placeholder file
    mkdir -p "$COMPONENT_PATH"
    touch "$COMPONENT_PATH/main.py" # Default to python, can be configured later

    echo "Success! Larva hatched at: $COMPONENT_PATH/main.py"
    echo "Next steps: 'spin cocoon' to add tests."

else
    echo "Error: Unknown command '$COMMAND $SUBCOMMAND'."
    show_usage
    exit 1
fi
