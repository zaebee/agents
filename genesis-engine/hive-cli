#!/usr/bin/env python3

import argparse
import os
import pathlib
import string

# --- Configuration ---
HIVE_ROOT = "hive/components"
TEMPLATE_ROOT = "genesis-engine/templates"

def show_usage():
    """Prints a more detailed usage message."""
    print("The Genesis Engine - The 'Connector' to the Hive.")
    print("This tool scaffolds new components from templates.")
    print("\nExample:")
    print(f"  ./{os.path.basename(__file__)} hatch command create-new-order")
    print("")

def snake_to_pascal(snake_case_string: str) -> str:
    """Converts snake_case or kebab-case to PascalCase."""
    return snake_case_string.replace("-", "_").replace("_", " ").title().replace(" ", "")

def hatch_component(codon_type: str, component_name: str):
    """
    Generates a new component from templates.
    """
    print(f"Hatching new '{codon_type}' codon named '{component_name}'...")

    # Ensure the directory name is a valid Python package name
    component_dir_name = component_name.replace("-", "_")
    component_path = pathlib.Path(HIVE_ROOT) / component_dir_name
    if component_path.exists():
        print(f"Error: Component '{component_name}' already exists at {component_path}.")
        exit(1)

    template_dir = pathlib.Path(TEMPLATE_ROOT) / codon_type
    if not template_dir.is_dir():
        print(f"Error: No templates found for codon type '{codon_type}' at {template_dir}.")
        print("This functionality has not been implemented yet.")
        exit(1)

    # Create the component directory
    component_path.mkdir(parents=True)
    print(f"Created directory: {component_path}")

    # --- Template Rendering ---
    class_name = snake_to_pascal(component_name)
    substitutions = {
        "ComponentName": component_name,
        "ClassName": class_name,
    }

    for template_file in template_dir.glob("*.tpl"):
        with open(template_file, "r") as f:
            template_content = f.read()

        template = string.Template(template_content)
        rendered_content = template.safe_substitute(substitutions)

        # a.py.tpl -> a.py
        output_filename = template_file.stem
        output_path = component_path / output_filename

        with open(output_path, "w") as f:
            f.write(rendered_content)

        print(f"  -> Generated {output_path}")

    # Create an empty __init__.py to make it a package
    (component_path / "__init__.py").touch()
    print(f"  -> Generated {component_path / '__init__.py'}")

    print("\nSuccess! New codon hatched.")
    print("Next steps: Implement the business logic and 'spin cocoon' to add tests.")


def main():
    """Main entry point for the CLI."""
    parser = argparse.ArgumentParser(
        description="The Genesis Engine: a CLI for managing the Hive codebase.",
        add_help=False, # We use a custom help message
    )
    parser.add_argument("command", choices=["hatch"], help="The action to perform.")
    parser.add_argument(
        "codon_type",
        choices=["command", "query", "event", "chronicler"],
        help="The type of codon to scaffold.",
    )
    parser.add_argument("component_name", help="The name of the new component (e.g., 'create-order').")

    # Manually check for help flag to show detailed usage
    if '-h' in os.sys.argv or '--help' in os.sys.argv:
        show_usage()
        parser.print_help()
        exit(0)

    args = parser.parse_args()

    if args.command == "hatch":
        hatch_component(args.codon_type, args.component_name)

if __name__ == "__main__":
    main()
